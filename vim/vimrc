set nocompatible " be vImproved
syntax on
filetype off

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle plugin manger
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'
Bundle 'wincent/Command-T'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'altercation/vim-colors-solarized'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-fugitive'
Bundle 'mileszs/ack.vim'
"""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""
" OS detection, s:sys = "win","linux", or "osx"
"""""""""""""""""""""""""""""""""""""""""""""""""""
let s:sys = "win"
if has("unix")
  if system("uname") == "Darwin\n"
    let s:sys = "osx"
  else
    let s:sys = "linux"
  endif
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""

set clipboard=unnamed                     " use system clipboard for copy/paste
filetype plugin indent on
let mapleader=","                         " use , as the leader key
set title                                 " terminal title
set mouse=a                               " mouse enabled all the time
set cursorline                            " highlight current line
set nostartofline                         " don't jump to start of line when jumping around
set backspace=indent,eol,start            " allow backspace to overwrite indents etc.
set smartindent
set autoindent

" when re-opening a file, automatically jump to the line
" we were on when we last exited
if has("autocmd")
    augroup vimrcEx
    au!

    " jump to last known cursor position (and center screen on that line)
    au BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\" zz"  |
      \ endif

    augroup END
endif

set directory=~/.vim-tmp/                 " put swap files somewhere central
set backupskip=/tmp/*,/private/tmp/*"     " tmp files (fixes crontab -e issue on OSX...)
set scrolloff=5                           " keep 5 context lines above/below cursor
set nu                                    " line numbers on

set expandtab                             " turn tabs into spaces
set tabstop=2                             " tab == 2 spaces
set shiftwidth=2                          " tab == 2 spaces
set softtabstop=2                         " but make the spaces feel like tabs...

set history=100000                        " a kazillion lines of command line history...
set undolevels=100000                     " ...and a bajillion levels of undo

set ignorecase                            " case insensitive search...
set smartcase                             " ...unless search term contains uppercase

set showmatch                             " highlight matching braces
set incsearch                             " find as you type
set hlsearch                              " search highlighting on

" toggle line numbering
nnoremap <Leader>b :set nu!<bar>set nu?<CR>

" toggle search term highlighting
nnoremap <Leader>h :set hlsearch!<bar>set hlsearch?<CR>

set laststatus=2                          " always show status line
set statusline=%<%F%h%m%r%h%w%y\ %{&ff}\ %=\ lin:%l/%L\ col:%c\ %p%%

set t_ti= t_te=                           " don't clear screen on exit

set hidden                                " allow unsaved buffers to be hidden

" list buffers, and navigate prev/next
nnoremap <Leader>l :ls<CR>
nnoremap <Leader>z :bp<CR>
nnoremap <Leader>x :bn<CR>

" have command-line completion <Tab> (for filenames, help topics, option names)
" first list the available options and complete the longest common part, then
" have further <Tab>s cycle through the possibilities:
set wildmode=list:longest,full

" Navigation
"""""""""""""""""""""""""""""""""""""""""""""""""""

" navigating split windows
" ctrl + hjkl to move between split windows
map <C-h> <C-W>h
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l

" scroll down in normal mode with space
nnoremap <Space> <C-e>

" move up and down using visual lines rather than actual lines
" this means that a long paragraph written on one line but 
" wrapped visually can be more easily navigated
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="


" Tab and Shift-Tab to indent, instead of << and >>
nmap <tab> v>
nmap <s-tab> v<
vmap <tab> >
vmap <s-tab> <

" not interested in pressing shift...
nnoremap ; :


"""""""""""""""""""""""""""""""""""""""""""""""""""
" folding
"""""""""""""""""""""""""""""""""""""""""""""""""""
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=1


"""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Tagbar
"""""""""""""""""""""""""""""""""""""""""""""""""""
if s:sys == "osx"
    let g:tagbar_ctags_bin = '/usr/local/bin/etags'
endif

nnoremap <silent> <leader>g :TagbarToggle<CR>
let g:tagbar_compact = 1
"""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree
"""""""""""""""""""""""""""""""""""""""""""""""""""
nmap ,n :NERDTreeToggle<CR>
let NERDTreeWinSize = 30

" single click to open directory or file
let NERDTreeMouseMode = 3

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction
"""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Command-T
"""""""""""""""""""""""""""""""""""""""""""""""""""

" search tree with <Leader>t
nmap <silent> <Leader>t :CommandT<CR>

" search buffers with <Leader>r
nmap <silent> <Leader>r :CommandTBuffer<CR>

" dismiss command-t window with ctrl-x or ctrl-c
let g:CommandTCancelMap=['<C-x>', '<C-c>']
"""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Ack 
"""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>a :Ack -i 
"""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors
"""""""""""""""""""""""""""""""""""""""""""""""""""
if(&t_Co==256)
  let g:solarized_termcolors=16
  color solarized
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""
