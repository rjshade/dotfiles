set nocompatible " be vImproved
syntax on
filetype off

" Vundle plugin manger
""""""""""""""""""""""""""""""""""""""""""""""""""
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'altercation/vim-colors-solarized'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-fugitive'
Bundle 'mileszs/ack.vim'
Bundle 'vim-ruby/vim-ruby'
Bundle 'kchmck/vim-coffee-script'
Bundle 'kien/ctrlp.vim'
Bundle 'vim-scripts/a.vim'
Bundle 'fholgado/minibufexpl.vim'
Bundle 'majutsushi/tagbar'
Bundle 'ervandew/supertab'
Bundle 'SirVer/ultisnips'
""""""""""""""""""""""""""""""""""""""""""""""""""

" OS detection, s:sys = "win","linux", or "osx"
""""""""""""""""""""""""""""""""""""""""""""""""""
let s:sys = "win"
if has("unix")
  if system("uname") == "Darwin\n"
    let s:sys = "osx"
  else
    let s:sys = "linux"
  endif
endif
""""""""""""""""""""""""""""""""""""""""""""""""""

set clipboard=unnamed                     " use system clipboard for copy/paste
filetype plugin indent on
let mapleader=","                         " use , as the leader key
set title                                 " terminal title
set mouse=a                               " mouse enabled all the time
set nostartofline                         " don't jump to start of line when jumping around
set backspace=indent,eol,start            " allow backspace to overwrite indents etc.
set smartindent
set autoindent

" WARNING: can really slow things down in long files/files with long lines
" set cursorline                            " highlight current line

" when re-opening a file, automatically jump to the line
" we were on when we last exited
if has("autocmd")
    augroup vimrcEx
    au!

    " jump to last known cursor position (and center screen on that line)
    au BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\" zz"  |
      \ endif

    augroup END
endif

set directory=~/.vim-tmp/                 " put swap files somewhere central
set backupskip=/tmp/*,/private/tmp/*"     " tmp files (fixes crontab -e issue on OSX...)
set scrolloff=10                           " keep 5 context lines above/below cursor
set nu                                    " line numbers on
"set rnu                                   " relative line numbering
"function! NumberToggle()
"  if(&relativenumber == 1)
"    set number
"  else
"    set relativenumber
"  endif
"endfunc
"nnoremap <leader>0 :call NumberToggle()<cr>

set expandtab                             " turn tabs into spaces
set tabstop=2                             " tab == 2 spaces
set shiftwidth=2                          " tab == 2 spaces
set softtabstop=2                         " but make the spaces feel like tabs...

set history=100000                        " a kazillion lines of command line history...
set undolevels=100000                     " ...and a bajillion levels of undo

set ignorecase                            " case insensitive search...
set smartcase                             " ...unless search term contains uppercase

set showmatch                             " highlight matching braces
set incsearch                             " find as you type
set hlsearch                              " search highlighting on

" toggle search term highlighting
nnoremap <leader>h :set hlsearch!<bar>set hlsearch?<CR>

set laststatus=2                          " always show status line
set statusline=%<%F%h%m%r%h%w%y\ %{&ff}\ %=\ lin:%l/%L\ col:%c\ %p%%

set t_ti= t_te=                           " don't clear screen on exit

set hidden                                " allow unsaved buffers to be hidden

" list buffers, and navigate prev/next
nnoremap <leader>l :ls<CR>
nnoremap <leader>, :bp<CR>
nnoremap <leader>. :bn<CR>
nnoremap <C-n> :bp<CR>
nnoremap <C-m> :bn<CR>

" have command-line completion <Tab> (for filenames, help topics, option names)
" first list the available options and complete the longest common part, then
" have further <Tab>s cycle through the possibilities:
set wildmode=list:longest,full
set wildignore=*.o,*.obj,.git,tmp


" search and replace current word in file
" r for (r)efactor
noremap <leader>r :%s/\<<C-R><C-W>\>/

" Navigation
""""""""""""""""""""""""""""""""""""""""""""""""""

" navigating split windows
" ctrl + hjkl to move between split windows
map <C-h> <C-W>h
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l

" move up and down using visual lines rather than actual lines
" this means that a long paragraph written on one line but 
" wrapped visually can be more easily navigated
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
""""""""""""""""""""""""""""""""""""""""""""""""""

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" Tab and Shift-Tab to indent, instead of << and >>
" nmap <tab> v>
" nmap <s-tab> v<

" not interested in pressing shift...
nnoremap ; :

" Y behaves like D, C
map Y y$

" NERDTree/Commenter
""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>n :NERDTreeToggle<CR>
let NERDTreeWinSize = 50

" single click to open directory or file
let NERDTreeMouseMode = 2

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" comments have a space after delimeter
let g:NERDSpaceDelims = 1
""""""""""""""""""""""""""""""""""""""""""""""""""

" MiniBufExplorer
" note that by default it will open automatically
" when more than one eligible buffer is open
""""""""""""""""""""""""""""""""""""""""""""""""""
" map <Leader>b :TMiniBufExplorer<cr>
let g:miniBufExplorerMoreThanOne=2

" Fuzzy search through directory trees
""""""""""""""""""""""""""""""""""""""""""""""""""
" search tree
map <leader>t :CtrlP<cr>

" search buffers
map <leader>b :CtrlPBuffer<cr>
""""""""""""""""""""""""""""""""""""""""""""""""""

" Ack
""""""""""""""""""""""""""""""""""""""""""""""""""
" ack in current tree
" (trailing space is intentional)
nnoremap <leader>ss :Ack --smart-case
" ack for current word
nnoremap <leader>sw :Ack --smart-case  <cword> <CR>
""""""""""""""""""""""""""""""""""""""""""""""""""

" Tagbar
""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>l :TagbarToggle <CR>
let g:tagbar_width = 60      "window width
let g:tagbar_autofocus = 1   "focus on open
" let g:tagbar_left = 1        "show on left
let g:tagbar_compact = 1     "hide help text
let g:tagbar_autoshowtag = 1 "highlight current tag
let g:tagbar_foldlevel = 2   "close all higher folds

" a.vim - switch between cpp header/source
""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>a :A <CR>
""""""""""""""""""""""""""""""""""""""""""""""""""

" Colors
""""""""""""""""""""""""""""""""""""""""""""""""""
if(&t_Co==256)
  " let g:solarized_termcolors=256
  color solarized
endif
""""""""""""""""""""""""""""""""""""""""""""""""""

" tpope/fugitive
""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <Leader>gs :Gstatus<cr>
""""""""""""""""""""""""""""""""""""""""""""""""""

" UltiSnips
""""""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsSnippetDirectories=['UltiSnips','snippets']

" Source any machine-specific settings
""""""""""""""""""""""""""""""""""""""""""""""""""
let VIMRC_LOCAL=expand("~/.vimrc-local")
if filereadable(VIMRC_LOCAL) | exe "source " . VIMRC_LOCAL | endif
