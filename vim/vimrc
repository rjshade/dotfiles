set nocompatible " be vImproved
filetype off

" Vundle plugin manger ---------------------------------------------------------
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/vundle'                  " plugin manager
Plugin 'google/vim-codefmt'             " code formatting
Plugin 'google/vim-glaive'              " needed for vim-maktaba
Plugin 'google/vim-maktaba'             " needed for vim-codefmt
Plugin 'majutsushi/tagbar'              " show tags in current file
Plugin 'mhinz/vim-signify'              " shows git status in sidebar
Plugin 'pboettch/vim-cmake-syntax'      " cmake syntax/formatting
Plugin 'scrooloose/nerdcommenter'       " comment/uncomment quickly
Plugin 'scrooloose/nerdtree'            " show directory tree
Plugin 'tpope/vim-fugitive'             " git commands in vim
Plugin 'valloric/youcompleteme'         " magic auto-completion
Plugin 'vim-scripts/a.vim'              " switch between .c and .h
Plugin 'tpope/vim-dispatch'
call vundle#end() " required
call glaive#Install()

" General settings -------------------------------------------------------------
syntax on                                 " syntax highlighting enabled
filetype plugin indent on
let mapleader=","                         " use , as the leader key
set title                                 " terminal title
set mouse=a                               " mouse enabled all the time
set nostartofline                         " don't jump to start of line
set backspace=indent,eol,start            " allow backspace to overwrite
set smartindent
set autoindent

" when re-opening a file, automatically jump to the line
" we were on when we last exited
if has("autocmd")
    augroup vimrcEx
    au!

    " jump to last known cursor position (and center screen on that line)
    au BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\" zz"  |
      \ endif

    augroup END
endif

set directory=~/.vim-tmp/                 " put swap files somewhere central
set backupskip=/tmp/*,/private/tmp/*"     " tmp files (crontab issue on OSX)
set scrolloff=10                          " keep 5 context lines around cursor
set nu                                    " line numbers on

set expandtab                             " turn tabs into spaces
set tabstop=2                             " tab == 2 spaces
set shiftwidth=2                          " tab == 2 spaces
set softtabstop=2                         " but make the spaces feel like tabs
" Use 2 space indentation in Python.
au FileType python setl shiftwidth=2 softtabstop=2 expandtab

set history=10000                         " a big history
set undolevels=100000                     " and a bigger undo history

set ignorecase                            " case insensitive search...
set smartcase                             " unless search term has uppercase

set showmatch                             " highlight matching braces
set incsearch                             " find as you type
set hlsearch                              " search highlighting on

" toggle search term highlighting
nnoremap <leader>h :set hlsearch!<bar>set hlsearch?<CR>

set laststatus=2                          " always show status line
set statusline=%<%F%h%m%r%h%w%y\ %{&ff}\ %=\ lin:%l/%L\ col:%c\ %p%%

set t_ti= t_te=                           " don't clear screen on exit

set hidden                                " allow unsaved buffers to be hidden

" vertical split with specified width (columns)
nnoremap <leader>vs :88vs<CR>

" not interested in pressing shift...
nnoremap ; :

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" Y behaves like D, C
map Y y$

" have command-line completion <Tab> (for filenames, help topics, etc.)
" first list the available options and complete the longest common part, then
" have further <Tab>s cycle through the possibilities:
set wildmode=list:longest,full
set wildignore=*.o,*.obj,.git,tmp

" Navigation -------------------------------------------------------------------
" ctrl + hjkl to move between split windows
map <C-h> <C-W>h
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l

" move up and down using visual lines rather than actual lines
" this means that a long paragraph written on one line but
" wrapped visually can be more easily navigated
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" NERDTree/Commenter -----------------------------------------------------------
nmap <leader>n :NERDTreeToggle<CR>
let NERDTreeWinSize = 50
let NERDTreeHijackNetrw=1 " Use NERDTree for normal file browsing
let NERDTreeMouseMode = 2 " single click to open directory or file
let g:NERDSpaceDelims = 1 " comments have a space after delimeter

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" FuzzyFinder ------------------------------------------------------------------
set rtp+=~/.fzf

" <leader>t to fzf files in current working directory
map <leader>t :FZF<cr>

function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

" <leader>b to fzf all open buffers
map <leader>b :call fzf#run({
\   'source':  reverse(<sid>buflist()),
\   'sink':    function('<sid>bufopen'),
\   'options': '+m',
\   'down':    len(<sid>buflist()) + 2
\ })<CR>

" Tagbar -----------------------------------------------------------------------
nnoremap <leader>l :TagbarToggle <CR>
let g:tagbar_width = 60      "window width
let g:tagbar_autofocus = 1   "focus on open
let g:tagbar_compact = 1     "hide help text
let g:tagbar_autoshowtag = 1 "highlight current tag
let g:tagbar_foldlevel = 2   "close all higher folds

" a.vim - switch between cpp header/source -------------------------------------
nnoremap <leader>a :A <CR>

" vim-codefmt ------------------------------------------------------------------
" Format currently highlighted lines.
map <C-F> :FormatLines<CR>
map <C-G> :FormatCode<CR>

" Colors -----------------------------------------------------------------------
colorscheme Tomorrow-Night
highlight clear SignColumn
highlight SignifySignAdd    ctermfg=112
highlight SignifySignDelete ctermfg=160
highlight SignifySignChange ctermfg=220

" Show trailing whitespace (except when typing at end of line)
highlight ExtraWhitespace ctermbg=yellow guibg=yellow
match ExtraWhitespace /\s\+\%#\@<!$/

" neovim -----------------------------------------------------------------------
if has('nvim')
  set inccommand=nosplit
endif

" Source any machine-specific settings -----------------------------------------
let VIMRC_LOCAL=expand("~/.config/local/vimrc-local")
if filereadable(VIMRC_LOCAL) | exe "source " . VIMRC_LOCAL | endif
