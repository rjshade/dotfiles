set nocompatible " be vImproved
filetype off

" vim-plug plugin manger ---------------------------------------------------------
call plug#begin()
Plug 'chriskempson/base16-vim'        " colorschemes
Plug 'junegunn/fzf.vim'               " useful fzf commands in Vim
Plug 'majutsushi/tagbar'              " show tags in current file
Plug 'mhinz/vim-signify'              " shows git status in sidebar
Plug 'scrooloose/nerdcommenter'       " comment/uncomment quickly
Plug 'tpope/vim-fugitive'             " git commands in vim
Plug 'ervandew/supertab'              " nifty tab completion
call plug#end()

" General settings -------------------------------------------------------------
syntax on                                 " syntax highlighting enabled
filetype plugin indent on
let mapleader=","                         " use , as the leader key
set title                                 " terminal title
set mouse=a                               " mouse enabled all the time
set nostartofline                         " don't jump to start of line
set backspace=indent,eol,start            " allow backspace to overwrite
set smartindent
set autoindent
set directory=~/.vim-tmp/                 " put swap files somewhere central
set backupskip=/tmp/*,/private/tmp/*"     " tmp files (crontab issue on OSX)
set scrolloff=10                          " keep 5 context lines around cursor
set nu                                    " line numbers on
set expandtab                             " turn tabs into spaces
set tabstop=2                             " tab == 2 spaces
set shiftwidth=2                          " tab == 2 spaces
set softtabstop=2                         " but make the spaces feel like tabs
set history=10000                         " a big history
set undolevels=100000                     " and a bigger undo history
set ignorecase                            " case insensitive search...
set smartcase                             " unless search term has uppercase
set showmatch                             " highlight matching braces
set incsearch                             " find as you type
set hlsearch                              " search highlighting on
set laststatus=2                          " always show status line
set statusline=%<%F%h%m%r%h%w%y\ %{&ff}\ %=\ line:%l/%L\ col:%c\ %p%%
set hidden                                " allow unsaved buffers to be hidden

" clear search on enter
:nnoremap <CR> :nohlsearch<CR>

" pressing shift is too much work
nnoremap ; :

" Y behaves like D, C
map Y y$

" Use 2 space indentation in Python.
au FileType python setl shiftwidth=2 softtabstop=2 expandtab

" when re-opening a file, automatically jump to the line
" we were on when we last exited
if has("autocmd")
    augroup vimrcEx
    au!

    " jump to last known cursor position (and center screen on that line)
    au BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\" zz"  |
      \ endif

    augroup END
endif

" Navigation -------------------------------------------------------------------
" ctrl + hjkl to move between split windows
map <C-h> <C-W>h
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l

" move up and down using visual lines rather than actual lines
" this means that a long paragraph written on one line but
" wrapped visually can be more easily navigated
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

 "FuzzyFinder ------------------------------------------------------------------
set rtp+=~/.fzf

" Ignore .gitignore files by using ag.
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" If `pwd` is inside a git repo, then run fzf from the root.
function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
command! GitProjectFiles execute 'Files' s:find_git_root()

" <leader>t to search files in current working directory
map <leader>t :GitProjectFiles<cr>

" <leader>s to search inside files using ag
map <leader>s :Ag<cr>

" <leader>b to search open buffer file names
map <leader>b :Buffers<cr>

" Tagbar -----------------------------------------------------------------------
nnoremap <leader>l :TagbarToggle <CR>
let g:tagbar_width = 60      "window width
let g:tagbar_autofocus = 1   "focus on open
let g:tagbar_compact = 1     "hide help text
let g:tagbar_autoshowtag = 1 "highlight current tag
let g:tagbar_foldlevel = 2   "close all higher folds

" switch between *.c* to *.h* and back -----------------------------------------
function! SwitchFromHeaderToImpl()
  if match(expand("%"), '\.c') > 0
    let target_file=substitute(expand("%:t"), '\.c\(.*\)', '', "")
    let cmd="find . \\( -iname '".target_file.".h' -o -iname '".target_file.".hh' -o -iname '".target_file.".hpp' \\) -print -quit"
  elseif match(expand("%"), "\\.h") > 0
    let target_file=substitute(expand("%:t"), '\.h\(.*\)', '', "")
    let cmd="find . \\( -iname '".target_file.".c' -o -iname '".target_file.".cc' -o -iname '".target_file.".cpp' \\) -print -quit"
  endif

  let found_file=system(cmd)
  if filereadable(found_file)
    return 0
  endif

  execute 'edit' found_file
endfun
nnoremap <leader>a :call SwitchFromHeaderToImpl() <CR>

" clang-format -----------------------------------------------------------------
function FormatBuffer()
  if &modified && !empty(findfile('.clang-format', expand('%:p:h') . ';'))
    let cursor_pos = getpos('.')
    :%!clang-format
    call setpos('.', cursor_pos)
  endif
endfunction

" Format on save.
autocmd BufWritePre *.h,*.hpp,*.c,*.cpp,*.cc :call FormatBuffer()

"" Colors -----------------------------------------------------------------------
colorscheme Tomorrow-Night
highlight clear SignColumn
highlight SignifySignAdd    ctermfg=112
highlight SignifySignDelete ctermfg=160
highlight SignifySignChange ctermfg=220

" Show trailing whitespace (except when typing at end of line)
highlight ExtraWhitespace ctermbg=yellow guibg=yellow
match ExtraWhitespace /\s\+\%#\@<!$/

" neovim -----------------------------------------------------------------------
if has('nvim')
  set inccommand=nosplit
endif

" Source any machine-specific settings -----------------------------------------
let VIMRC_LOCAL=expand("~/.config/local/vimrc")
if filereadable(VIMRC_LOCAL) | exe "source " . VIMRC_LOCAL | endif
